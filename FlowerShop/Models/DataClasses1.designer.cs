#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FlowerShop.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QL_CHHoa")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFLOWER(FLOWER instance);
    partial void UpdateFLOWER(FLOWER instance);
    partial void DeleteFLOWER(FLOWER instance);
    partial void InsertACCOUNT(ACCOUNT instance);
    partial void UpdateACCOUNT(ACCOUNT instance);
    partial void DeleteACCOUNT(ACCOUNT instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertFLOWEROCCASION(FLOWEROCCASION instance);
    partial void UpdateFLOWEROCCASION(FLOWEROCCASION instance);
    partial void DeleteFLOWEROCCASION(FLOWEROCCASION instance);
    partial void InsertFLOWER1(FLOWER1 instance);
    partial void UpdateFLOWER1(FLOWER1 instance);
    partial void DeleteFLOWER1(FLOWER1 instance);
    partial void InsertOCCASION(OCCASION instance);
    partial void UpdateOCCASION(OCCASION instance);
    partial void DeleteOCCASION(OCCASION instance);
    partial void InsertORDERDETAIL(ORDERDETAIL instance);
    partial void UpdateORDERDETAIL(ORDERDETAIL instance);
    partial void DeleteORDERDETAIL(ORDERDETAIL instance);
    partial void InsertORDER(ORDER instance);
    partial void UpdateORDER(ORDER instance);
    partial void DeleteORDER(ORDER instance);
    partial void InsertSTAFF(STAFF instance);
    partial void UpdateSTAFF(STAFF instance);
    partial void DeleteSTAFF(STAFF instance);
    #endregion
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FLOWER> FLOWERs
		{
			get
			{
				return this.GetTable<FLOWER>();
			}
		}
		
		public System.Data.Linq.Table<ACCOUNT> ACCOUNTs
		{
			get
			{
				return this.GetTable<ACCOUNT>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<FLOWEROCCASION> FLOWEROCCASIONs
		{
			get
			{
				return this.GetTable<FLOWEROCCASION>();
			}
		}
		
		public System.Data.Linq.Table<FLOWER1> FLOWER1s
		{
			get
			{
				return this.GetTable<FLOWER1>();
			}
		}
		
		public System.Data.Linq.Table<OCCASION> OCCASIONs
		{
			get
			{
				return this.GetTable<OCCASION>();
			}
		}
		
		public System.Data.Linq.Table<ORDERDETAIL> ORDERDETAILs
		{
			get
			{
				return this.GetTable<ORDERDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<ORDER> ORDERs
		{
			get
			{
				return this.GetTable<ORDER>();
			}
		}
		
		public System.Data.Linq.Table<STAFF> STAFFs
		{
			get
			{
				return this.GetTable<STAFF>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FLOWERS")]
	public partial class FLOWER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_FLOWER;
		
		private string _FLOWER_NAME;
		
		private string _DESCRIPTIONS;
		
		private System.Nullable<decimal> _PRICE;
		
		private string _URL_IMAGE;
		
		private System.Nullable<int> _STOCK;
		
		private EntitySet<FLOWEROCCASION> _FLOWEROCCASIONs;
		
		private EntitySet<ORDERDETAIL> _ORDERDETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FLOWERChanging(int value);
    partial void OnID_FLOWERChanged();
    partial void OnFLOWER_NAMEChanging(string value);
    partial void OnFLOWER_NAMEChanged();
    partial void OnDESCRIPTIONSChanging(string value);
    partial void OnDESCRIPTIONSChanged();
    partial void OnPRICEChanging(System.Nullable<decimal> value);
    partial void OnPRICEChanged();
    partial void OnURL_IMAGEChanging(string value);
    partial void OnURL_IMAGEChanged();
    partial void OnSTOCKChanging(System.Nullable<int> value);
    partial void OnSTOCKChanged();
    #endregion
		
		public FLOWER()
		{
			this._FLOWEROCCASIONs = new EntitySet<FLOWEROCCASION>(new Action<FLOWEROCCASION>(this.attach_FLOWEROCCASIONs), new Action<FLOWEROCCASION>(this.detach_FLOWEROCCASIONs));
			this._ORDERDETAILs = new EntitySet<ORDERDETAIL>(new Action<ORDERDETAIL>(this.attach_ORDERDETAILs), new Action<ORDERDETAIL>(this.detach_ORDERDETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_FLOWER", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_FLOWER
		{
			get
			{
				return this._ID_FLOWER;
			}
			set
			{
				if ((this._ID_FLOWER != value))
				{
					this.OnID_FLOWERChanging(value);
					this.SendPropertyChanging();
					this._ID_FLOWER = value;
					this.SendPropertyChanged("ID_FLOWER");
					this.OnID_FLOWERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FLOWER_NAME", DbType="NVarChar(100)")]
		public string FLOWER_NAME
		{
			get
			{
				return this._FLOWER_NAME;
			}
			set
			{
				if ((this._FLOWER_NAME != value))
				{
					this.OnFLOWER_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FLOWER_NAME = value;
					this.SendPropertyChanged("FLOWER_NAME");
					this.OnFLOWER_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTIONS", DbType="NVarChar(2000)")]
		public string DESCRIPTIONS
		{
			get
			{
				return this._DESCRIPTIONS;
			}
			set
			{
				if ((this._DESCRIPTIONS != value))
				{
					this.OnDESCRIPTIONSChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTIONS = value;
					this.SendPropertyChanged("DESCRIPTIONS");
					this.OnDESCRIPTIONSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL_IMAGE", DbType="VarChar(80)")]
		public string URL_IMAGE
		{
			get
			{
				return this._URL_IMAGE;
			}
			set
			{
				if ((this._URL_IMAGE != value))
				{
					this.OnURL_IMAGEChanging(value);
					this.SendPropertyChanging();
					this._URL_IMAGE = value;
					this.SendPropertyChanged("URL_IMAGE");
					this.OnURL_IMAGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOCK", DbType="Int")]
		public System.Nullable<int> STOCK
		{
			get
			{
				return this._STOCK;
			}
			set
			{
				if ((this._STOCK != value))
				{
					this.OnSTOCKChanging(value);
					this.SendPropertyChanging();
					this._STOCK = value;
					this.SendPropertyChanged("STOCK");
					this.OnSTOCKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER_FLOWEROCCASION", Storage="_FLOWEROCCASIONs", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER")]
		public EntitySet<FLOWEROCCASION> FLOWEROCCASIONs
		{
			get
			{
				return this._FLOWEROCCASIONs;
			}
			set
			{
				this._FLOWEROCCASIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER_ORDERDETAIL", Storage="_ORDERDETAILs", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER")]
		public EntitySet<ORDERDETAIL> ORDERDETAILs
		{
			get
			{
				return this._ORDERDETAILs;
			}
			set
			{
				this._ORDERDETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FLOWEROCCASIONs(FLOWEROCCASION entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER = this;
		}
		
		private void detach_FLOWEROCCASIONs(FLOWEROCCASION entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER = null;
		}
		
		private void attach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER = this;
		}
		
		private void detach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ACCOUNTS")]
	public partial class ACCOUNT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_ACCOUNT;
		
		private string _USERNAME;
		
		private string _PASSWORDS;
		
		private string _ROLES;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
		private EntitySet<STAFF> _STAFFs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ACCOUNTChanging(int value);
    partial void OnID_ACCOUNTChanged();
    partial void OnUSERNAMEChanging(string value);
    partial void OnUSERNAMEChanged();
    partial void OnPASSWORDSChanging(string value);
    partial void OnPASSWORDSChanged();
    partial void OnROLESChanging(string value);
    partial void OnROLESChanged();
    #endregion
		
		public ACCOUNT()
		{
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			this._STAFFs = new EntitySet<STAFF>(new Action<STAFF>(this.attach_STAFFs), new Action<STAFF>(this.detach_STAFFs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ACCOUNT", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_ACCOUNT
		{
			get
			{
				return this._ID_ACCOUNT;
			}
			set
			{
				if ((this._ID_ACCOUNT != value))
				{
					this.OnID_ACCOUNTChanging(value);
					this.SendPropertyChanging();
					this._ID_ACCOUNT = value;
					this.SendPropertyChanged("ID_ACCOUNT");
					this.OnID_ACCOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USERNAME", DbType="Char(20)")]
		public string USERNAME
		{
			get
			{
				return this._USERNAME;
			}
			set
			{
				if ((this._USERNAME != value))
				{
					this.OnUSERNAMEChanging(value);
					this.SendPropertyChanging();
					this._USERNAME = value;
					this.SendPropertyChanged("USERNAME");
					this.OnUSERNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PASSWORDS", DbType="Char(20)")]
		public string PASSWORDS
		{
			get
			{
				return this._PASSWORDS;
			}
			set
			{
				if ((this._PASSWORDS != value))
				{
					this.OnPASSWORDSChanging(value);
					this.SendPropertyChanging();
					this._PASSWORDS = value;
					this.SendPropertyChanged("PASSWORDS");
					this.OnPASSWORDSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROLES", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string ROLES
		{
			get
			{
				return this._ROLES;
			}
			set
			{
				if ((this._ROLES != value))
				{
					this.OnROLESChanging(value);
					this.SendPropertyChanging();
					this._ROLES = value;
					this.SendPropertyChanged("ROLES");
					this.OnROLESChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACCOUNT_CUSTOMER", Storage="_CUSTOMERs", ThisKey="ID_ACCOUNT", OtherKey="ID_ACCOUNT")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACCOUNT_STAFF", Storage="_STAFFs", ThisKey="ID_ACCOUNT", OtherKey="ID_ACCOUNT")]
		public EntitySet<STAFF> STAFFs
		{
			get
			{
				return this._STAFFs;
			}
			set
			{
				this._STAFFs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.ACCOUNT = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.ACCOUNT = null;
		}
		
		private void attach_STAFFs(STAFF entity)
		{
			this.SendPropertyChanging();
			entity.ACCOUNT = this;
		}
		
		private void detach_STAFFs(STAFF entity)
		{
			this.SendPropertyChanging();
			entity.ACCOUNT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMERS")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_CUSTOMER;
		
		private string _FULLNAME;
		
		private string _EMAIL;
		
		private string _PHONE_NUMBER;
		
		private string _ADDRESSS;
		
		private System.Nullable<int> _ID_ACCOUNT;
		
		private EntitySet<ORDER> _ORDERs;
		
		private EntityRef<ACCOUNT> _ACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CUSTOMERChanging(int value);
    partial void OnID_CUSTOMERChanged();
    partial void OnFULLNAMEChanging(string value);
    partial void OnFULLNAMEChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnPHONE_NUMBERChanging(string value);
    partial void OnPHONE_NUMBERChanged();
    partial void OnADDRESSSChanging(string value);
    partial void OnADDRESSSChanged();
    partial void OnID_ACCOUNTChanging(System.Nullable<int> value);
    partial void OnID_ACCOUNTChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			this._ACCOUNT = default(EntityRef<ACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CUSTOMER", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_CUSTOMER
		{
			get
			{
				return this._ID_CUSTOMER;
			}
			set
			{
				if ((this._ID_CUSTOMER != value))
				{
					this.OnID_CUSTOMERChanging(value);
					this.SendPropertyChanging();
					this._ID_CUSTOMER = value;
					this.SendPropertyChanged("ID_CUSTOMER");
					this.OnID_CUSTOMERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FULLNAME", DbType="NVarChar(40)")]
		public string FULLNAME
		{
			get
			{
				return this._FULLNAME;
			}
			set
			{
				if ((this._FULLNAME != value))
				{
					this.OnFULLNAMEChanging(value);
					this.SendPropertyChanging();
					this._FULLNAME = value;
					this.SendPropertyChanged("FULLNAME");
					this.OnFULLNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="VarChar(40)")]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONE_NUMBER", DbType="Char(11)")]
		public string PHONE_NUMBER
		{
			get
			{
				return this._PHONE_NUMBER;
			}
			set
			{
				if ((this._PHONE_NUMBER != value))
				{
					this.OnPHONE_NUMBERChanging(value);
					this.SendPropertyChanging();
					this._PHONE_NUMBER = value;
					this.SendPropertyChanged("PHONE_NUMBER");
					this.OnPHONE_NUMBERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ADDRESSS", DbType="NVarChar(100)")]
		public string ADDRESSS
		{
			get
			{
				return this._ADDRESSS;
			}
			set
			{
				if ((this._ADDRESSS != value))
				{
					this.OnADDRESSSChanging(value);
					this.SendPropertyChanging();
					this._ADDRESSS = value;
					this.SendPropertyChanged("ADDRESSS");
					this.OnADDRESSSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ACCOUNT", DbType="Int")]
		public System.Nullable<int> ID_ACCOUNT
		{
			get
			{
				return this._ID_ACCOUNT;
			}
			set
			{
				if ((this._ID_ACCOUNT != value))
				{
					if (this._ACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ACCOUNTChanging(value);
					this.SendPropertyChanging();
					this._ID_ACCOUNT = value;
					this.SendPropertyChanged("ID_ACCOUNT");
					this.OnID_ACCOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_ORDER", Storage="_ORDERs", ThisKey="ID_CUSTOMER", OtherKey="ID_CUSTOMER")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACCOUNT_CUSTOMER", Storage="_ACCOUNT", ThisKey="ID_ACCOUNT", OtherKey="ID_ACCOUNT", IsForeignKey=true)]
		public ACCOUNT ACCOUNT
		{
			get
			{
				return this._ACCOUNT.Entity;
			}
			set
			{
				ACCOUNT previousValue = this._ACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._ACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ACCOUNT.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._ACCOUNT.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._ID_ACCOUNT = value.ID_ACCOUNT;
					}
					else
					{
						this._ID_ACCOUNT = default(Nullable<int>);
					}
					this.SendPropertyChanged("ACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FLOWEROCCASIONS")]
	public partial class FLOWEROCCASION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_FLOWER;
		
		private int _ID_OCCASION;
		
		private EntityRef<FLOWER> _FLOWER;
		
		private EntityRef<FLOWER1> _FLOWER1;
		
		private EntityRef<OCCASION> _OCCASION;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FLOWERChanging(int value);
    partial void OnID_FLOWERChanged();
    partial void OnID_OCCASIONChanging(int value);
    partial void OnID_OCCASIONChanged();
    #endregion
		
		public FLOWEROCCASION()
		{
			this._FLOWER = default(EntityRef<FLOWER>);
			this._FLOWER1 = default(EntityRef<FLOWER1>);
			this._OCCASION = default(EntityRef<OCCASION>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_FLOWER", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_FLOWER
		{
			get
			{
				return this._ID_FLOWER;
			}
			set
			{
				if ((this._ID_FLOWER != value))
				{
					if ((this._FLOWER.HasLoadedOrAssignedValue || this._FLOWER1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FLOWERChanging(value);
					this.SendPropertyChanging();
					this._ID_FLOWER = value;
					this.SendPropertyChanged("ID_FLOWER");
					this.OnID_FLOWERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_OCCASION", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_OCCASION
		{
			get
			{
				return this._ID_OCCASION;
			}
			set
			{
				if ((this._ID_OCCASION != value))
				{
					if (this._OCCASION.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_OCCASIONChanging(value);
					this.SendPropertyChanging();
					this._ID_OCCASION = value;
					this.SendPropertyChanged("ID_OCCASION");
					this.OnID_OCCASIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER_FLOWEROCCASION", Storage="_FLOWER", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER", IsForeignKey=true)]
		public FLOWER FLOWER
		{
			get
			{
				return this._FLOWER.Entity;
			}
			set
			{
				FLOWER previousValue = this._FLOWER.Entity;
				if (((previousValue != value) 
							|| (this._FLOWER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FLOWER.Entity = null;
						previousValue.FLOWEROCCASIONs.Remove(this);
					}
					this._FLOWER.Entity = value;
					if ((value != null))
					{
						value.FLOWEROCCASIONs.Add(this);
						this._ID_FLOWER = value.ID_FLOWER;
					}
					else
					{
						this._ID_FLOWER = default(int);
					}
					this.SendPropertyChanged("FLOWER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER1_FLOWEROCCASION", Storage="_FLOWER1", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER", IsForeignKey=true)]
		public FLOWER1 FLOWER1
		{
			get
			{
				return this._FLOWER1.Entity;
			}
			set
			{
				FLOWER1 previousValue = this._FLOWER1.Entity;
				if (((previousValue != value) 
							|| (this._FLOWER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FLOWER1.Entity = null;
						previousValue.FLOWEROCCASIONs.Remove(this);
					}
					this._FLOWER1.Entity = value;
					if ((value != null))
					{
						value.FLOWEROCCASIONs.Add(this);
						this._ID_FLOWER = value.ID_FLOWER;
					}
					else
					{
						this._ID_FLOWER = default(int);
					}
					this.SendPropertyChanged("FLOWER1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OCCASION_FLOWEROCCASION", Storage="_OCCASION", ThisKey="ID_OCCASION", OtherKey="ID_OCCASION", IsForeignKey=true)]
		public OCCASION OCCASION
		{
			get
			{
				return this._OCCASION.Entity;
			}
			set
			{
				OCCASION previousValue = this._OCCASION.Entity;
				if (((previousValue != value) 
							|| (this._OCCASION.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OCCASION.Entity = null;
						previousValue.FLOWEROCCASIONs.Remove(this);
					}
					this._OCCASION.Entity = value;
					if ((value != null))
					{
						value.FLOWEROCCASIONs.Add(this);
						this._ID_OCCASION = value.ID_OCCASION;
					}
					else
					{
						this._ID_OCCASION = default(int);
					}
					this.SendPropertyChanged("OCCASION");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FLOWERS")]
	public partial class FLOWER1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_FLOWER;
		
		private string _FLOWER_NAME;
		
		private string _DESCRIPTIONS;
		
		private System.Nullable<decimal> _PRICE;
		
		private string _URL_IMAGE;
		
		private System.Nullable<int> _STOCK;
		
		private EntitySet<FLOWEROCCASION> _FLOWEROCCASIONs;
		
		private EntitySet<ORDERDETAIL> _ORDERDETAILs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_FLOWERChanging(int value);
    partial void OnID_FLOWERChanged();
    partial void OnFLOWER_NAMEChanging(string value);
    partial void OnFLOWER_NAMEChanged();
    partial void OnDESCRIPTIONSChanging(string value);
    partial void OnDESCRIPTIONSChanged();
    partial void OnPRICEChanging(System.Nullable<decimal> value);
    partial void OnPRICEChanged();
    partial void OnURL_IMAGEChanging(string value);
    partial void OnURL_IMAGEChanged();
    partial void OnSTOCKChanging(System.Nullable<int> value);
    partial void OnSTOCKChanged();
    #endregion
		
		public FLOWER1()
		{
			this._FLOWEROCCASIONs = new EntitySet<FLOWEROCCASION>(new Action<FLOWEROCCASION>(this.attach_FLOWEROCCASIONs), new Action<FLOWEROCCASION>(this.detach_FLOWEROCCASIONs));
			this._ORDERDETAILs = new EntitySet<ORDERDETAIL>(new Action<ORDERDETAIL>(this.attach_ORDERDETAILs), new Action<ORDERDETAIL>(this.detach_ORDERDETAILs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_FLOWER", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_FLOWER
		{
			get
			{
				return this._ID_FLOWER;
			}
			set
			{
				if ((this._ID_FLOWER != value))
				{
					this.OnID_FLOWERChanging(value);
					this.SendPropertyChanging();
					this._ID_FLOWER = value;
					this.SendPropertyChanged("ID_FLOWER");
					this.OnID_FLOWERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FLOWER_NAME", DbType="NVarChar(100)")]
		public string FLOWER_NAME
		{
			get
			{
				return this._FLOWER_NAME;
			}
			set
			{
				if ((this._FLOWER_NAME != value))
				{
					this.OnFLOWER_NAMEChanging(value);
					this.SendPropertyChanging();
					this._FLOWER_NAME = value;
					this.SendPropertyChanged("FLOWER_NAME");
					this.OnFLOWER_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DESCRIPTIONS", DbType="NVarChar(2000)")]
		public string DESCRIPTIONS
		{
			get
			{
				return this._DESCRIPTIONS;
			}
			set
			{
				if ((this._DESCRIPTIONS != value))
				{
					this.OnDESCRIPTIONSChanging(value);
					this.SendPropertyChanging();
					this._DESCRIPTIONS = value;
					this.SendPropertyChanged("DESCRIPTIONS");
					this.OnDESCRIPTIONSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL_IMAGE", DbType="VarChar(80)")]
		public string URL_IMAGE
		{
			get
			{
				return this._URL_IMAGE;
			}
			set
			{
				if ((this._URL_IMAGE != value))
				{
					this.OnURL_IMAGEChanging(value);
					this.SendPropertyChanging();
					this._URL_IMAGE = value;
					this.SendPropertyChanged("URL_IMAGE");
					this.OnURL_IMAGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STOCK", DbType="Int")]
		public System.Nullable<int> STOCK
		{
			get
			{
				return this._STOCK;
			}
			set
			{
				if ((this._STOCK != value))
				{
					this.OnSTOCKChanging(value);
					this.SendPropertyChanging();
					this._STOCK = value;
					this.SendPropertyChanged("STOCK");
					this.OnSTOCKChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER1_FLOWEROCCASION", Storage="_FLOWEROCCASIONs", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER")]
		public EntitySet<FLOWEROCCASION> FLOWEROCCASIONs
		{
			get
			{
				return this._FLOWEROCCASIONs;
			}
			set
			{
				this._FLOWEROCCASIONs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER1_ORDERDETAIL", Storage="_ORDERDETAILs", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER")]
		public EntitySet<ORDERDETAIL> ORDERDETAILs
		{
			get
			{
				return this._ORDERDETAILs;
			}
			set
			{
				this._ORDERDETAILs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FLOWEROCCASIONs(FLOWEROCCASION entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER1 = this;
		}
		
		private void detach_FLOWEROCCASIONs(FLOWEROCCASION entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER1 = null;
		}
		
		private void attach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER1 = this;
		}
		
		private void detach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.FLOWER1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OCCASIONS")]
	public partial class OCCASION : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_OCCASION;
		
		private string _OCCASION_NAME;
		
		private EntitySet<FLOWEROCCASION> _FLOWEROCCASIONs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_OCCASIONChanging(int value);
    partial void OnID_OCCASIONChanged();
    partial void OnOCCASION_NAMEChanging(string value);
    partial void OnOCCASION_NAMEChanged();
    #endregion
		
		public OCCASION()
		{
			this._FLOWEROCCASIONs = new EntitySet<FLOWEROCCASION>(new Action<FLOWEROCCASION>(this.attach_FLOWEROCCASIONs), new Action<FLOWEROCCASION>(this.detach_FLOWEROCCASIONs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_OCCASION", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_OCCASION
		{
			get
			{
				return this._ID_OCCASION;
			}
			set
			{
				if ((this._ID_OCCASION != value))
				{
					this.OnID_OCCASIONChanging(value);
					this.SendPropertyChanging();
					this._ID_OCCASION = value;
					this.SendPropertyChanged("ID_OCCASION");
					this.OnID_OCCASIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OCCASION_NAME", DbType="NVarChar(30)")]
		public string OCCASION_NAME
		{
			get
			{
				return this._OCCASION_NAME;
			}
			set
			{
				if ((this._OCCASION_NAME != value))
				{
					this.OnOCCASION_NAMEChanging(value);
					this.SendPropertyChanging();
					this._OCCASION_NAME = value;
					this.SendPropertyChanged("OCCASION_NAME");
					this.OnOCCASION_NAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OCCASION_FLOWEROCCASION", Storage="_FLOWEROCCASIONs", ThisKey="ID_OCCASION", OtherKey="ID_OCCASION")]
		public EntitySet<FLOWEROCCASION> FLOWEROCCASIONs
		{
			get
			{
				return this._FLOWEROCCASIONs;
			}
			set
			{
				this._FLOWEROCCASIONs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FLOWEROCCASIONs(FLOWEROCCASION entity)
		{
			this.SendPropertyChanging();
			entity.OCCASION = this;
		}
		
		private void detach_FLOWEROCCASIONs(FLOWEROCCASION entity)
		{
			this.SendPropertyChanging();
			entity.OCCASION = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ORDERDETAILS")]
	public partial class ORDERDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_ORDER;
		
		private int _ID_FLOWER;
		
		private System.Nullable<int> _QUANTITY;
		
		private System.Nullable<decimal> _PRICE;
		
		private EntityRef<FLOWER> _FLOWER;
		
		private EntityRef<FLOWER1> _FLOWER1;
		
		private EntityRef<ORDER> _ORDER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ORDERChanging(int value);
    partial void OnID_ORDERChanged();
    partial void OnID_FLOWERChanging(int value);
    partial void OnID_FLOWERChanged();
    partial void OnQUANTITYChanging(System.Nullable<int> value);
    partial void OnQUANTITYChanged();
    partial void OnPRICEChanging(System.Nullable<decimal> value);
    partial void OnPRICEChanged();
    #endregion
		
		public ORDERDETAIL()
		{
			this._FLOWER = default(EntityRef<FLOWER>);
			this._FLOWER1 = default(EntityRef<FLOWER1>);
			this._ORDER = default(EntityRef<ORDER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ORDER", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_ORDER
		{
			get
			{
				return this._ID_ORDER;
			}
			set
			{
				if ((this._ID_ORDER != value))
				{
					if (this._ORDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ORDERChanging(value);
					this.SendPropertyChanging();
					this._ID_ORDER = value;
					this.SendPropertyChanged("ID_ORDER");
					this.OnID_ORDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_FLOWER", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID_FLOWER
		{
			get
			{
				return this._ID_FLOWER;
			}
			set
			{
				if ((this._ID_FLOWER != value))
				{
					if ((this._FLOWER.HasLoadedOrAssignedValue || this._FLOWER1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_FLOWERChanging(value);
					this.SendPropertyChanging();
					this._ID_FLOWER = value;
					this.SendPropertyChanged("ID_FLOWER");
					this.OnID_FLOWERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QUANTITY", DbType="Int")]
		public System.Nullable<int> QUANTITY
		{
			get
			{
				return this._QUANTITY;
			}
			set
			{
				if ((this._QUANTITY != value))
				{
					this.OnQUANTITYChanging(value);
					this.SendPropertyChanging();
					this._QUANTITY = value;
					this.SendPropertyChanged("QUANTITY");
					this.OnQUANTITYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PRICE", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> PRICE
		{
			get
			{
				return this._PRICE;
			}
			set
			{
				if ((this._PRICE != value))
				{
					this.OnPRICEChanging(value);
					this.SendPropertyChanging();
					this._PRICE = value;
					this.SendPropertyChanged("PRICE");
					this.OnPRICEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER_ORDERDETAIL", Storage="_FLOWER", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER", IsForeignKey=true)]
		public FLOWER FLOWER
		{
			get
			{
				return this._FLOWER.Entity;
			}
			set
			{
				FLOWER previousValue = this._FLOWER.Entity;
				if (((previousValue != value) 
							|| (this._FLOWER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FLOWER.Entity = null;
						previousValue.ORDERDETAILs.Remove(this);
					}
					this._FLOWER.Entity = value;
					if ((value != null))
					{
						value.ORDERDETAILs.Add(this);
						this._ID_FLOWER = value.ID_FLOWER;
					}
					else
					{
						this._ID_FLOWER = default(int);
					}
					this.SendPropertyChanged("FLOWER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FLOWER1_ORDERDETAIL", Storage="_FLOWER1", ThisKey="ID_FLOWER", OtherKey="ID_FLOWER", IsForeignKey=true)]
		public FLOWER1 FLOWER1
		{
			get
			{
				return this._FLOWER1.Entity;
			}
			set
			{
				FLOWER1 previousValue = this._FLOWER1.Entity;
				if (((previousValue != value) 
							|| (this._FLOWER1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FLOWER1.Entity = null;
						previousValue.ORDERDETAILs.Remove(this);
					}
					this._FLOWER1.Entity = value;
					if ((value != null))
					{
						value.ORDERDETAILs.Add(this);
						this._ID_FLOWER = value.ID_FLOWER;
					}
					else
					{
						this._ID_FLOWER = default(int);
					}
					this.SendPropertyChanged("FLOWER1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ORDERDETAIL", Storage="_ORDER", ThisKey="ID_ORDER", OtherKey="ID_ORDER", IsForeignKey=true)]
		public ORDER ORDER
		{
			get
			{
				return this._ORDER.Entity;
			}
			set
			{
				ORDER previousValue = this._ORDER.Entity;
				if (((previousValue != value) 
							|| (this._ORDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDER.Entity = null;
						previousValue.ORDERDETAILs.Remove(this);
					}
					this._ORDER.Entity = value;
					if ((value != null))
					{
						value.ORDERDETAILs.Add(this);
						this._ID_ORDER = value.ID_ORDER;
					}
					else
					{
						this._ID_ORDER = default(int);
					}
					this.SendPropertyChanged("ORDER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ORDERS")]
	public partial class ORDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_ORDER;
		
		private System.Nullable<int> _ID_CUSTOMER;
		
		private System.Nullable<System.DateTime> _ORDER_DATE;
		
		private System.Nullable<decimal> _TOTAL_AMOUNT;
		
		private string _ORDER_STATUS;
		
		private EntitySet<ORDERDETAIL> _ORDERDETAILs;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_ORDERChanging(int value);
    partial void OnID_ORDERChanged();
    partial void OnID_CUSTOMERChanging(System.Nullable<int> value);
    partial void OnID_CUSTOMERChanged();
    partial void OnORDER_DATEChanging(System.Nullable<System.DateTime> value);
    partial void OnORDER_DATEChanged();
    partial void OnTOTAL_AMOUNTChanging(System.Nullable<decimal> value);
    partial void OnTOTAL_AMOUNTChanged();
    partial void OnORDER_STATUSChanging(string value);
    partial void OnORDER_STATUSChanged();
    #endregion
		
		public ORDER()
		{
			this._ORDERDETAILs = new EntitySet<ORDERDETAIL>(new Action<ORDERDETAIL>(this.attach_ORDERDETAILs), new Action<ORDERDETAIL>(this.detach_ORDERDETAILs));
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ORDER", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_ORDER
		{
			get
			{
				return this._ID_ORDER;
			}
			set
			{
				if ((this._ID_ORDER != value))
				{
					this.OnID_ORDERChanging(value);
					this.SendPropertyChanging();
					this._ID_ORDER = value;
					this.SendPropertyChanged("ID_ORDER");
					this.OnID_ORDERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_CUSTOMER", DbType="Int")]
		public System.Nullable<int> ID_CUSTOMER
		{
			get
			{
				return this._ID_CUSTOMER;
			}
			set
			{
				if ((this._ID_CUSTOMER != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CUSTOMERChanging(value);
					this.SendPropertyChanging();
					this._ID_CUSTOMER = value;
					this.SendPropertyChanged("ID_CUSTOMER");
					this.OnID_CUSTOMERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_DATE", DbType="Date")]
		public System.Nullable<System.DateTime> ORDER_DATE
		{
			get
			{
				return this._ORDER_DATE;
			}
			set
			{
				if ((this._ORDER_DATE != value))
				{
					this.OnORDER_DATEChanging(value);
					this.SendPropertyChanging();
					this._ORDER_DATE = value;
					this.SendPropertyChanged("ORDER_DATE");
					this.OnORDER_DATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TOTAL_AMOUNT", DbType="Decimal(10,0)")]
		public System.Nullable<decimal> TOTAL_AMOUNT
		{
			get
			{
				return this._TOTAL_AMOUNT;
			}
			set
			{
				if ((this._TOTAL_AMOUNT != value))
				{
					this.OnTOTAL_AMOUNTChanging(value);
					this.SendPropertyChanging();
					this._TOTAL_AMOUNT = value;
					this.SendPropertyChanged("TOTAL_AMOUNT");
					this.OnTOTAL_AMOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ORDER_STATUS", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string ORDER_STATUS
		{
			get
			{
				return this._ORDER_STATUS;
			}
			set
			{
				if ((this._ORDER_STATUS != value))
				{
					this.OnORDER_STATUSChanging(value);
					this.SendPropertyChanging();
					this._ORDER_STATUS = value;
					this.SendPropertyChanged("ORDER_STATUS");
					this.OnORDER_STATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_ORDERDETAIL", Storage="_ORDERDETAILs", ThisKey="ID_ORDER", OtherKey="ID_ORDER")]
		public EntitySet<ORDERDETAIL> ORDERDETAILs
		{
			get
			{
				return this._ORDERDETAILs;
			}
			set
			{
				this._ORDERDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_ORDER", Storage="_CUSTOMER", ThisKey="ID_CUSTOMER", OtherKey="ID_CUSTOMER", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._ID_CUSTOMER = value.ID_CUSTOMER;
					}
					else
					{
						this._ID_CUSTOMER = default(Nullable<int>);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = this;
		}
		
		private void detach_ORDERDETAILs(ORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STAFFS")]
	public partial class STAFF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_STAFF;
		
		private string _FULLNAME;
		
		private string _PHONE_NUMBER;
		
		private string _EMAIL;
		
		private System.Nullable<int> _ID_ACCOUNT;
		
		private EntityRef<ACCOUNT> _ACCOUNT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_STAFFChanging(int value);
    partial void OnID_STAFFChanged();
    partial void OnFULLNAMEChanging(string value);
    partial void OnFULLNAMEChanged();
    partial void OnPHONE_NUMBERChanging(string value);
    partial void OnPHONE_NUMBERChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnID_ACCOUNTChanging(System.Nullable<int> value);
    partial void OnID_ACCOUNTChanged();
    #endregion
		
		public STAFF()
		{
			this._ACCOUNT = default(EntityRef<ACCOUNT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_STAFF", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_STAFF
		{
			get
			{
				return this._ID_STAFF;
			}
			set
			{
				if ((this._ID_STAFF != value))
				{
					this.OnID_STAFFChanging(value);
					this.SendPropertyChanging();
					this._ID_STAFF = value;
					this.SendPropertyChanged("ID_STAFF");
					this.OnID_STAFFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FULLNAME", DbType="NVarChar(40)")]
		public string FULLNAME
		{
			get
			{
				return this._FULLNAME;
			}
			set
			{
				if ((this._FULLNAME != value))
				{
					this.OnFULLNAMEChanging(value);
					this.SendPropertyChanging();
					this._FULLNAME = value;
					this.SendPropertyChanged("FULLNAME");
					this.OnFULLNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PHONE_NUMBER", DbType="Char(11)")]
		public string PHONE_NUMBER
		{
			get
			{
				return this._PHONE_NUMBER;
			}
			set
			{
				if ((this._PHONE_NUMBER != value))
				{
					this.OnPHONE_NUMBERChanging(value);
					this.SendPropertyChanging();
					this._PHONE_NUMBER = value;
					this.SendPropertyChanged("PHONE_NUMBER");
					this.OnPHONE_NUMBERChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMAIL", DbType="VarChar(40)")]
		public string EMAIL
		{
			get
			{
				return this._EMAIL;
			}
			set
			{
				if ((this._EMAIL != value))
				{
					this.OnEMAILChanging(value);
					this.SendPropertyChanging();
					this._EMAIL = value;
					this.SendPropertyChanged("EMAIL");
					this.OnEMAILChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_ACCOUNT", DbType="Int")]
		public System.Nullable<int> ID_ACCOUNT
		{
			get
			{
				return this._ID_ACCOUNT;
			}
			set
			{
				if ((this._ID_ACCOUNT != value))
				{
					if (this._ACCOUNT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ACCOUNTChanging(value);
					this.SendPropertyChanging();
					this._ID_ACCOUNT = value;
					this.SendPropertyChanged("ID_ACCOUNT");
					this.OnID_ACCOUNTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ACCOUNT_STAFF", Storage="_ACCOUNT", ThisKey="ID_ACCOUNT", OtherKey="ID_ACCOUNT", IsForeignKey=true)]
		public ACCOUNT ACCOUNT
		{
			get
			{
				return this._ACCOUNT.Entity;
			}
			set
			{
				ACCOUNT previousValue = this._ACCOUNT.Entity;
				if (((previousValue != value) 
							|| (this._ACCOUNT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ACCOUNT.Entity = null;
						previousValue.STAFFs.Remove(this);
					}
					this._ACCOUNT.Entity = value;
					if ((value != null))
					{
						value.STAFFs.Add(this);
						this._ID_ACCOUNT = value.ID_ACCOUNT;
					}
					else
					{
						this._ID_ACCOUNT = default(Nullable<int>);
					}
					this.SendPropertyChanged("ACCOUNT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
